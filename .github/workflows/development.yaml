name: Development Workflow
on:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint_backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Build
        working-directory: backend
        run: go build -v ./...
      - name: Lint
        working-directory: backend
        run: |
          # binary will be $(go env GOPATH)/bin/golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.45.2
          golangci-lint --version
          golangci-lint run ./...
      - name: Vet
        working-directory: backend
        run: |
          go vet ./...
  test_backend:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Build
        working-directory: backend
        run: go build -v ./...
      - name: Lint
        working-directory: backend
        run: |
          # binary will be $(go env GOPATH)/bin/golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.45.2
          golangci-lint --version
          golangci-lint run ./...
      - name: Vet
        working-directory: backend
        run: |
          go vet ./...
      - name: Test
        working-directory: backend
        run: |
          go test -v -coverprofile coverage.out ./...
          go tool cover -func coverage.out
      - name: Calculate Test Coverage
        env:
          TESTCOVERAGE_THRESHOLD: -1
        working-directory: backend
        run: |
          echo "Quality Gate: checking test coverage is above threshold ..."
          echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
          COVERAGE=`go test -cover ./... | grep coverage: | awk '{print substr($5, 1, length($5)-3)}'`
          echo "COVERAGE IS $COVERAGE"
          COVERAGE_VALUE=$((PATH_COVERAGE))
          echo "COVERAGE VALUE IS $COVERAGE_VALUE"

          if [[ $COVERAGE_VALUE -lt $TESTCOVERAGE_THRESHOLD ]]
          then
            echo "TEST COVERAGE THRESHOLD (greater than 90%) NOT MET: Coverage is $PATH_COVERAGE"
            echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
            exit 1
          else
            echo "COVERAGE IS ABOVE THRESHOLD, CONTINUING"
          fi
          echo "Test Coverage Complete"
  push_to_registry:
    name: Push Docker image to Docker hub
    runs-on: ubuntu-latest
    needs:
      - test_backend
      - lint_backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: dockedupstream/golangfileupload
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          # Action uses this to find the Docker file: ({context}/Dockerfile)
          context: backend/build
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Test_Frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Run frontend flow
        run: echo "FRONTEND RUNNING"
        